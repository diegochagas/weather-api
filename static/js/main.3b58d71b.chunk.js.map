{"version":3,"sources":["store/modules/weather/actions.js","components/SearchBar/styles.js","components/SearchBar/index.js","components/Chart/index.js","components/WeatherList/styles.js","components/WeatherList/index.js","store/modules/weather/reducer.js","store/modules/rootReducer.js","services/api.js","store/modules/weather/sagas.js","store/modules/rootSaga.js","store/index.js","store/createStore.js","styles/global.js","App.js","index.js"],"names":["types","UPDATE_WEATHER_REQUEST","UPDATE_WEATHER_SUCCESS","UPDATE_WEATHER_FAILURE","Container","styled","div","SearchBar","useState","term","setTerm","errorMessage","setErrorMessage","dispatch","useDispatch","className","type","placeholder","value","onChange","event","target","onClick","city","preventDefault","payload","Chart","props","height","width","data","color","_","round","sum","length","units","Table","table","WeatherList","weathers","useSelector","state","undefined","map","weather","temps","list","cityWeather","main","temp","pressures","pressure","humidities","humidity","coord","lon","lat","key","id","name","INITIAL_STATE","combineReducers","action","err","API_KEY","api","axios","create","baseURL","fetchWeather","call","get","response","put","all","takeLatest","rootSaga","sagaMiddleware","createSagaMiddleware","store","reducers","middlewares","enhancer","applyMiddleware","createStore","rootReducer","run","createGlobalStyle","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3b58d71b.chunk.js","sourcesContent":["export const types = {\r\n  UPDATE_WEATHER_REQUEST: '@user/UPDATE_WEATHER_REQUEST',\r\n  UPDATE_WEATHER_SUCCESS: '@user/UPDATE_WEATHER_SUCCESS',\r\n  UPDATE_WEATHER_FAILURE: '@user/UPDATE_WEATHER_FAILURE',\r\n};\r\n\r\nexport function updateWeatherRequest(city) {\r\n  return {\r\n    type: types.UPDATE_WEATHER_REQUEST,\r\n    payload: { city },\r\n  };\r\n}\r\n\r\nexport function updateWeatherSuccess(weather) {\r\n  return {\r\n    type: types.UPDATE_WEATHER_SUCCESS,\r\n    payload: { weather },\r\n  };\r\n}\r\n\r\nexport function updateWeatherFailure(err) {\r\n  return {\r\n    type: types.UPDATE_WEATHER_FAILURE,\r\n    payload: { err },\r\n  };\r\n}\r\n","import styled from 'styled-components';\r\n\r\nexport const Container = styled.div`\r\n  margin: 20px;\r\n\r\n  form {\r\n    max-width: 768px;\r\n    margin: 0px auto;\r\n\r\n    input {\r\n      padding: 24px 20px;\r\n    }\r\n\r\n    button {\r\n      padding-top: 12px;\r\n      padding-bottom: 12px;\r\n    }\r\n  }\r\n\r\n  .alert {\r\n    max-width: 768px;\r\n    margin: 0px auto;\r\n  }\r\n`;\r\n","import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { updateWeatherRequest } from '../../store/modules/weather/actions';\r\n\r\nimport { Container } from './styles';\r\n\r\nexport default function SearchBar() {\r\n  const [term, setTerm] = useState('');\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  function onInputChange(event) {\r\n    setTerm(event.target.value);\r\n  }\r\n\r\n  function handleSearch(event) {\r\n    event.preventDefault();\r\n\r\n    if (term) {\r\n      dispatch(updateWeatherRequest(term));\r\n\r\n      setTerm('');\r\n\r\n      setErrorMessage('');\r\n    }\r\n\r\n    if (term === '') {\r\n      setErrorMessage('Write city name');\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <form className=\"input-group\">\r\n        <input\r\n          type=\"text\"\r\n          className=\"form-control\"\r\n          placeholder=\"Get a five-day forecast in your favorite cities\"\r\n          value={term}\r\n          onChange={onInputChange}\r\n        />\r\n\r\n        <span className=\"input-group-btn\">\r\n          <button\r\n            type=\"submit\"\r\n            className=\"btn btn-secondary\"\r\n            onClick={handleSearch}\r\n          >\r\n            Submit\r\n          </button>\r\n        </span>\r\n      </form>\r\n\r\n      {errorMessage ? (\r\n        <div className=\"alert alert-danger\">{errorMessage}</div>\r\n      ) : null}\r\n    </Container>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport _ from 'lodash';\r\nimport {\r\n  Sparklines,\r\n  SparklinesLine,\r\n  SparklinesReferenceLine,\r\n} from 'react-sparklines';\r\n\r\n// import { Container } from './styles';\r\n\r\nexport default function Chart(props) {\r\n  function average(data) {\r\n    return _.round(_.sum(data) / data.length);\r\n  }\r\n\r\n  return (\r\n    <td>\r\n      <div>\r\n        <Sparklines height={120} width={180} data={props.data}>\r\n          <SparklinesLine color={props.color} />\r\n          <SparklinesReferenceLine type=\"avg\" />\r\n        </Sparklines>\r\n        <div>\r\n          {average(props.data)} {props.units}\r\n        </div>\r\n      </div>\r\n    </td>\r\n  );\r\n}\r\n","import styled from 'styled-components';\r\n\r\nexport const Table = styled.table`\r\n  td,\r\n  th {\r\n    vertical-align: middle !important;\r\n    text-align: center !important;\r\n  }\r\n\r\n  td:first-of-type,\r\n  td:first-of-type > div {\r\n    height: 200px;\r\n    width: 250px;\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport _ from 'lodash';\r\n\r\nimport Chart from '../Chart';\r\nimport GoogleMapComponent from '../GoogleMapComponent';\r\n\r\nimport { Table } from './styles';\r\n\r\nexport default function WeatherList() {\r\n  const weathers = useSelector(state => state.weathers);\r\n\r\n  return weathers !== undefined && weathers.length > 0 ? (\r\n    <Table className=\"table table-hover\">\r\n      <thead>\r\n        <tr>\r\n          <th>City</th>\r\n          <th>Temperature (C)</th>\r\n          <th>Pressure (hPa)</th>\r\n          <th>Humidity (%)</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {weathers.map(weather => {\r\n          const temps = _.map(\r\n            weather.list.map(cityWeather => cityWeather.main.temp),\r\n            temp => temp - 273.15\r\n          );\r\n          const pressures = weather.list.map(\r\n            cityWeather => cityWeather.main.pressure\r\n          );\r\n          const humidities = weather.list.map(\r\n            cityWeather => cityWeather.main.humidity\r\n          );\r\n          const { lon, lat } = weather.city.coord;\r\n\r\n          return (\r\n            <tr key={weather.city.id}>\r\n              <td>\r\n                {weather.city.name}\r\n\r\n                {/* <GoogleMapComponent lng={lon} lat={lat} /> */}\r\n              </td>\r\n              <Chart data={temps} color=\"orange\" units=\"C\" />\r\n              <Chart data={pressures} color=\"green\" units=\"hPa\" />\r\n              <Chart data={humidities} color=\"black\" units=\"%\" />\r\n            </tr>\r\n          );\r\n        })}\r\n      </tbody>\r\n    </Table>\r\n  ) : null;\r\n}\r\n","import { types } from './actions';\r\n\r\nconst INITIAL_STATE = [];\r\n\r\nexport default function weathers(state = INITIAL_STATE, action) {\r\n  switch (action.type) {\r\n    case types.UPDATE_WEATHER_SUCCESS:\r\n      return [action.payload.weather, ...state];\r\n    case types.UPDATE_WEATHER_FAILURE:\r\n      return action.payload.err;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\r\n\r\nimport weathers from './weather/reducer';\r\n\r\nexport default combineReducers({\r\n  weathers,\r\n});\r\n","import axios from 'axios';\r\n\r\nexport const API_KEY = '66a80829085f138206554340f458199f';\r\n\r\nconst api = axios.create({\r\n  baseURL: 'http://api.openweathermap.org/data/2.5',\r\n});\r\n\r\nexport default api;\r\n","import { takeLatest, call, put, all } from 'redux-saga/effects';\r\n\r\nimport api, { API_KEY } from '../../../services/api';\r\n\r\nimport { types, updateWeatherSuccess, updateWeatherFailure } from './actions';\r\n\r\nexport function* fetchWeather({ payload }) {\r\n  try {\r\n    const { city } = payload;\r\n\r\n    const response = yield call(\r\n      api.get,\r\n      `forecast?appid=${API_KEY}&q=${city},nz`\r\n    );\r\n\r\n    yield put(updateWeatherSuccess(response.data));\r\n  } catch (err) {\r\n    yield put(updateWeatherFailure(err));\r\n  }\r\n}\r\n\r\nexport default all([takeLatest(types.UPDATE_WEATHER_REQUEST, fetchWeather)]);\r\n","import { all } from 'redux-saga/effects';\r\n\r\nimport weather from './weather/sagas';\r\n\r\nexport default function* rootSaga() {\r\n  return yield all([weather]);\r\n}\r\n","import createSagaMiddleware from 'redux-saga';\r\n\r\nimport createStore from './createStore';\r\n\r\nimport rootReducer from './modules/rootReducer';\r\nimport rootSaga from './modules/rootSaga';\r\n\r\nconst sagaMiddleware = createSagaMiddleware({});\r\n\r\nconst middlewares = [sagaMiddleware];\r\n\r\nconst store = createStore(rootReducer, middlewares);\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport { store };\r\n","import { createStore, compose, applyMiddleware } from 'redux';\r\n\r\nexport default (reducers, middlewares) => {\r\n  const enhancer =\r\n    process.env.NODE_ENV === 'development'\r\n      ? compose(applyMiddleware(...middlewares))\r\n      : applyMiddleware(...middlewares);\r\n\r\n  return createStore(reducers, enhancer);\r\n};\r\n","import { createGlobalStyle } from 'styled-components';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nexport default createGlobalStyle`\r\n  @import url('https://fonts.googleapis.com/css?family=Roboto:400,700&display=swap');\r\n  * {\r\n    margin: 0;\r\n    padding: 0;\r\n    outline: 0;\r\n    box-sizing: border-box;\r\n  }\r\n  *:focus {\r\n    outline: 0;\r\n  }\r\n  html, body, #root {\r\n    height: 100%;\r\n  }\r\n  body {\r\n    -webkit-font-smoothing: antialiased;\r\n  }\r\n  body, input, button {\r\n    font: 14px 'Roboto', sans-serif;\r\n  }\r\n  a {\r\n    text-decoration: none;\r\n  }\r\n  ul {\r\n    list-style: none;\r\n  }\r\n  button {\r\n    cursor: pointer;\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport SearchBar from './components/SearchBar';\r\nimport WeatherList from './components/WeatherList';\r\n\r\nimport { store } from './store';\r\n\r\nimport GlobalStyle from './styles/global';\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <SearchBar />\r\n\r\n      <GlobalStyle />\r\n\r\n      <WeatherList />\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}